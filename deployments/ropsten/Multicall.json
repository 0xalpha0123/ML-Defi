{
  "address": "0xa40AE26693C935Fb561372F130c10b97F2bC0464",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc678b0341c99964fd046b74a751b9f0d2db62a4c0bb8228cbf3349b1f9c74fd",
  "receipt": {
    "to": null,
    "from": "0x673FfE9D00DdB550e11fD8c796DFd0ec0D26566d",
    "contractAddress": "0xa40AE26693C935Fb561372F130c10b97F2bC0464",
    "transactionIndex": 14,
    "gasUsed": "412116",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa33ef26f3a7ca01b0f2928ebc40501745793c80128900a5375190b7ea8cbfca9",
    "transactionHash": "0xfc678b0341c99964fd046b74a751b9f0d2db62a4c0bb8228cbf3349b1f9c74fd",
    "logs": [],
    "blockNumber": 11660551,
    "cumulativeGasUsed": "1362443",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9eec8b295b0fef3c62fcdcc68a161724",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"methods\":{},\"title\":\"Multicall - Aggregate results from multiple read-only function calls\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Multicall.sol\":{\"content\":\"pragma solidity >=0.5.17;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title Multicall - Aggregate results from multiple read-only function calls\\r\\n/// @author Michael Elliot <mike@makerdao.com>\\r\\n/// @author Joshua Levine <joshua@makerdao.com>\\r\\n/// @author Nick Johnson <arachnid@notdot.net>\\r\\n\\r\\ncontract Multicall {\\r\\n    struct Call {\\r\\n        address target;\\r\\n        bytes callData;\\r\\n    }\\r\\n    function aggregate(Call[] calldata calls) external view returns (uint256 blockNumber, bytes[] memory returnData) {\\r\\n        blockNumber = block.number;\\r\\n        returnData = new bytes[](calls.length);\\r\\n        for(uint256 i = 0; i < calls.length; i++) {\\r\\n            uint256 size;\\r\\n            address callerTarget = calls[i].target;\\r\\n            // solhint-disable-next-line no-inline-assembly\\r\\n            assembly { size := extcodesize(callerTarget) }\\r\\n            if (size>0) {\\r\\n                (bool success, bytes memory ret) = calls[i].target.staticcall(calls[i].callData);\\r\\n                require(success, \\\"Multicall: Error in call\\\");\\r\\n                returnData[i] = ret;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    // Helper functions\\r\\n    function getEthBalance(address addr) external view returns (uint256 balance) {\\r\\n        balance = addr.balance;\\r\\n    }\\r\\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash) {\\r\\n        blockHash = blockhash(blockNumber);\\r\\n    }\\r\\n    function getLastBlockHash() external view returns (bytes32 blockHash) {\\r\\n        blockHash = blockhash(block.number - 1);\\r\\n    }\\r\\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp) {\\r\\n        timestamp = block.timestamp;\\r\\n    }\\r\\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty) {\\r\\n        difficulty = block.difficulty;\\r\\n    }\\r\\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit) {\\r\\n        gaslimit = block.gaslimit;\\r\\n    }\\r\\n    function getCurrentBlockCoinbase() external view returns (address coinbase) {\\r\\n        coinbase = block.coinbase;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5e103a1e1857483b3e85c878dfbb69222ba391088bd94916bc76cf49129bb8a4\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061067f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100e757806386d516e8146100ef578063a8b0574e146100f7578063ee82ac5e1461010c57610088565b80630f28c97d1461008d578063252dba42146100ab57806327e86d6e146100cc5780634d2301cc146100d4575b600080fd5b61009561011f565b6040516100a29190610566565b60405180910390f35b6100be6100b93660046103c2565b610123565b6040516100a2929190610584565b610095610311565b6100956100e236600461039c565b61031a565b610095610327565b61009561032b565b6100ff61032f565b6040516100a29190610558565b61009561011a366004610404565b610333565b4290565b604080518281526020808402820101909152439060609083801561015b57816020015b60608152602001906001900390816101465790505b50905060005b838110156103095760008086868481811061017857fe5b602002820190508035603e193684900301811261019457600080fd5b6101a4920160208101915061039c565b803b9250905081156102ff57600060608888868181106101c057fe5b602002820190508035603e19368490030181126101dc57600080fd5b6101ec920160208101915061039c565b6001600160a01b031689898781811061020157fe5b602002820190508035603e193684900301811261021d57600080fd5b919091019050602081018035601e193684900301811261023c57600080fd5b9091016020810191503567ffffffffffffffff81111561025b57600080fd5b3681900382131561026b57600080fd5b60405161027992919061054b565b600060405180830381855afa9150503d80600081146102b4576040519150601f19603f3d011682016040523d82523d6000602084013e6102b9565b606091505b5091509150816102e45760405162461bcd60e51b81526004016102db90610574565b60405180910390fd5b808686815181106102f157fe5b602002602001018190525050505b5050600101610161565b509250929050565b60001943014090565b6001600160a01b03163190565b4490565b4590565b4190565b4090565b80356103428161061c565b92915050565b60008083601f84011261035a57600080fd5b50813567ffffffffffffffff81111561037257600080fd5b60208301915083602082028301111561038a57600080fd5b9250929050565b803561034281610633565b6000602082840312156103ae57600080fd5b60006103ba8484610337565b949350505050565b600080602083850312156103d557600080fd5b823567ffffffffffffffff8111156103ec57600080fd5b6103f885828601610348565b92509250509250929050565b60006020828403121561041657600080fd5b60006103ba8484610391565b600061042e83836104da565b9392505050565b61043e816105bc565b82525050565b600061044f826105aa565b61045981856105ae565b93508360208202850161046b856105a4565b8060005b858110156104a557848403895281516104888582610422565b9450610493836105a4565b60209a909a019992505060010161046f565b5091979650505050505050565b61043e816105c7565b60006104c783856105b7565b93506104d48385846105d6565b50500190565b60006104e5826105aa565b6104ef81856105ae565b93506104ff8185602086016105e2565b61050881610612565b9093019392505050565b600061051f6018836105ae565b7f4d756c746963616c6c3a204572726f7220696e2063616c6c0000000000000000815260200192915050565b60006103ba8284866104bb565b602081016103428284610435565b6020810161034282846104b2565b6020808252810161034281610512565b6040810161059282856104b2565b81810360208301526103ba8184610444565b60200190565b5190565b90815260200190565b919050565b6000610342826105ca565b90565b6001600160a01b031690565b82818337506000910152565b60005b838110156105fd5781810151838201526020016105e5565b8381111561060c576000848401525b50505050565b601f01601f191690565b610625816105bc565b811461063057600080fd5b50565b610625816105c756fea365627a7a7231582079a95ec0d26c0d30586c05f84b4fde449a000a031a08077d6d699f8620467f236c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100e757806386d516e8146100ef578063a8b0574e146100f7578063ee82ac5e1461010c57610088565b80630f28c97d1461008d578063252dba42146100ab57806327e86d6e146100cc5780634d2301cc146100d4575b600080fd5b61009561011f565b6040516100a29190610566565b60405180910390f35b6100be6100b93660046103c2565b610123565b6040516100a2929190610584565b610095610311565b6100956100e236600461039c565b61031a565b610095610327565b61009561032b565b6100ff61032f565b6040516100a29190610558565b61009561011a366004610404565b610333565b4290565b604080518281526020808402820101909152439060609083801561015b57816020015b60608152602001906001900390816101465790505b50905060005b838110156103095760008086868481811061017857fe5b602002820190508035603e193684900301811261019457600080fd5b6101a4920160208101915061039c565b803b9250905081156102ff57600060608888868181106101c057fe5b602002820190508035603e19368490030181126101dc57600080fd5b6101ec920160208101915061039c565b6001600160a01b031689898781811061020157fe5b602002820190508035603e193684900301811261021d57600080fd5b919091019050602081018035601e193684900301811261023c57600080fd5b9091016020810191503567ffffffffffffffff81111561025b57600080fd5b3681900382131561026b57600080fd5b60405161027992919061054b565b600060405180830381855afa9150503d80600081146102b4576040519150601f19603f3d011682016040523d82523d6000602084013e6102b9565b606091505b5091509150816102e45760405162461bcd60e51b81526004016102db90610574565b60405180910390fd5b808686815181106102f157fe5b602002602001018190525050505b5050600101610161565b509250929050565b60001943014090565b6001600160a01b03163190565b4490565b4590565b4190565b4090565b80356103428161061c565b92915050565b60008083601f84011261035a57600080fd5b50813567ffffffffffffffff81111561037257600080fd5b60208301915083602082028301111561038a57600080fd5b9250929050565b803561034281610633565b6000602082840312156103ae57600080fd5b60006103ba8484610337565b949350505050565b600080602083850312156103d557600080fd5b823567ffffffffffffffff8111156103ec57600080fd5b6103f885828601610348565b92509250509250929050565b60006020828403121561041657600080fd5b60006103ba8484610391565b600061042e83836104da565b9392505050565b61043e816105bc565b82525050565b600061044f826105aa565b61045981856105ae565b93508360208202850161046b856105a4565b8060005b858110156104a557848403895281516104888582610422565b9450610493836105a4565b60209a909a019992505060010161046f565b5091979650505050505050565b61043e816105c7565b60006104c783856105b7565b93506104d48385846105d6565b50500190565b60006104e5826105aa565b6104ef81856105ae565b93506104ff8185602086016105e2565b61050881610612565b9093019392505050565b600061051f6018836105ae565b7f4d756c746963616c6c3a204572726f7220696e2063616c6c0000000000000000815260200192915050565b60006103ba8284866104bb565b602081016103428284610435565b6020810161034282846104b2565b6020808252810161034281610512565b6040810161059282856104b2565b81810360208301526103ba8184610444565b60200190565b5190565b90815260200190565b919050565b6000610342826105ca565b90565b6001600160a01b031690565b82818337506000910152565b60005b838110156105fd5781810151838201526020016105e5565b8381111561060c576000848401525b50505050565b601f01601f191690565b610625816105bc565b811461063057600080fd5b50565b610625816105c756fea365627a7a7231582079a95ec0d26c0d30586c05f84b4fde449a000a031a08077d6d699f8620467f236c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "methods": {},
    "title": "Multicall - Aggregate results from multiple read-only function calls"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}