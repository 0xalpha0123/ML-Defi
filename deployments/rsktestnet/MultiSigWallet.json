{
  "address": "0x9760d4A155058F6BeC8d9fD8D50222073e57083e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Confirmation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "ExecutionFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Revocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Submission",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_OWNER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "confirmTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "confirmations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_confirmations",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_transactionIds",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "revokeConfirmation",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "submitTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "transactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d686d083f88a6f6f46833859479008a9c9dc041497a9984ef04fa527630a3a5",
  "receipt": {
    "to": null,
    "from": "0x9C95B0EF2D3E1D9ca479524Ba738C87BE28C1585",
    "contractAddress": "0x9760d4A155058F6BeC8d9fD8D50222073e57083e",
    "transactionIndex": 4,
    "gasUsed": "2116076",
    "logsBloom": "0x
    "blockHash": "0x102c6e193abf4486e052f2fafee8b232c584b11fe68ce368f68029a54c761b93",
    "transactionHash": "0x5d686d083f88a6f6f46833859479008a9c9dc041497a9984ef04fa527630a3a5",
    "logs": [],
    "blockNumber": 1516312,
    "cumulativeGasUsed": "2285889",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x9C95B0EF2D3E1D9ca479524Ba738C87BE28C1585",
      "0x8F63De841e7bccCe39FaA828128dA25f8A93411f"
    ],
    1
  ],
  "solcInputHash": "57190ac4df58dc291ca8cf2e83a00369",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13.mod\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefan George - <stefan.george@consensys.net>\",\"methods\":{\"addOwner(address)\":{\"details\":\"Allows to add a new owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of new owner.\"}},\"changeRequirement(uint256)\":{\"details\":\"Allows to change the number of required confirmations. Transaction has to be sent by wallet.\",\"params\":{\"_required\":\"Number of required confirmations.\"}},\"confirmTransaction(uint256)\":{\"details\":\"Allows an owner to confirm a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"constructor\":{\"details\":\"Contract constructor sets initial owners and required number of confirmations.\",\"params\":{\"_owners\":\"List of initial owners.\",\"_required\":\"Number of required confirmations.\"}},\"executeTransaction(uint256)\":{\"details\":\"Allows anyone to execute a confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"getConfirmationCount(uint256)\":{\"details\":\"Returns number of confirmations of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Number of confirmations.\"},\"getConfirmations(uint256)\":{\"details\":\"Returns array with owner addresses, which confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Returns array of owner addresses.\"},\"getOwners()\":{\"details\":\"Returns list of owners.\",\"return\":\"List of owner addresses.\"},\"getTransactionCount(bool,bool)\":{\"details\":\"Returns total number of transactions after filers are applied.\",\"params\":{\"executed\":\"Include executed transactions.\",\"pending\":\"Include pending transactions.\"},\"return\":\"Total number of transactions after filters are applied.\"},\"getTransactionIds(uint256,uint256,bool,bool)\":{\"details\":\"Returns list of transaction IDs in defined range.\",\"params\":{\"executed\":\"Include executed transactions.\",\"from\":\"Index start position of transaction array.\",\"pending\":\"Include pending transactions.\",\"to\":\"Index end position of transaction array.\"},\"return\":\"Returns array of transaction IDs.\"},\"isConfirmed(uint256)\":{\"details\":\"Returns the confirmation status of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"return\":\"Confirmation status.\"},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"replaceOwner(address,address)\":{\"details\":\"Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\",\"params\":{\"newOwner\":\"Address of new owner.\",\"owner\":\"Address of owner to be replaced.\"}},\"revokeConfirmation(uint256)\":{\"details\":\"Allows an owner to revoke a confirmation for a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"submitTransaction(address,uint256,bytes)\":{\"details\":\"Allows an owner to submit and confirm a transaction.\",\"params\":{\"data\":\"Transaction data payload.\",\"destination\":\"Transaction target address.\",\"value\":\"Transaction ether value.\"},\"return\":\"Returns transaction ID.\"}},\"title\":\"Multisignature wallet - Allows multiple parties to agree on transactions before execution.\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/MultiSigWallet.sol\":\"MultiSigWallet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MultiSigWallet.sol\":{\"content\":\"pragma solidity >= 0.5.16;\\n\\n\\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\\n/// @author Stefan George - <stefan.george@consensys.net>\\ncontract MultiSigWallet {\\n\\n    /*\\n     *  Events\\n     */\\n    event Confirmation(address indexed sender, uint indexed transactionId);\\n    event Revocation(address indexed sender, uint indexed transactionId);\\n    event Submission(uint indexed transactionId);\\n    event Execution(uint indexed transactionId);\\n    event ExecutionFailure(uint indexed transactionId);\\n    event Deposit(address indexed sender, uint value);\\n    event OwnerAddition(address indexed owner);\\n    event OwnerRemoval(address indexed owner);\\n    event RequirementChange(uint required);\\n\\n    /*\\n     *  views\\n     */\\n    uint constant public MAX_OWNER_COUNT = 50;\\n\\n    /*\\n     *  Storage\\n     */\\n    mapping (uint => Transaction) public transactions;\\n    mapping (uint => mapping (address => bool)) public confirmations;\\n    mapping (address => bool) public isOwner;\\n    address[] public owners;\\n    uint public required;\\n    uint public transactionCount;\\n\\n    struct Transaction {\\n        address destination;\\n        uint value;\\n        bytes data;\\n        bool executed;\\n    }\\n\\n    /*\\n     *  Modifiers\\n     */\\n    modifier onlyWallet() {\\n        require(msg.sender == address(this), \\\"Only wallet allowed\\\");\\n        _;\\n    }\\n\\n    modifier ownerDoesNotExist(address owner) {\\n        require(!isOwner[owner], \\\"The owner already exists\\\");\\n        _;\\n    }\\n\\n    modifier ownerExists(address owner) {\\n        require(isOwner[owner], \\\"The owner does not exist\\\");\\n        _;\\n    }\\n\\n    modifier transactionExists(uint transactionId) {\\n        require(transactions[transactionId].destination != address(0), \\\"Transaction does not exist\\\");\\n        _;\\n    }\\n\\n    modifier confirmed(uint transactionId, address owner) {\\n        require(confirmations[transactionId][owner], \\\"Transaction is not confirmed by owner\\\");\\n        _;\\n    }\\n\\n    modifier notConfirmed(uint transactionId, address owner) {\\n        require(!confirmations[transactionId][owner], \\\"Transaction is already confirmed by owner\\\");\\n        _;\\n    }\\n\\n    modifier notExecuted(uint transactionId) {\\n        require(!transactions[transactionId].executed, \\\"Transaction was already executed\\\");\\n        _;\\n    }\\n\\n    modifier notNull(address _address) {\\n        require(_address != address(0), \\\"Address cannot be empty\\\");\\n        _;\\n    }\\n\\n    modifier validRequirement(uint ownerCount, uint _required) {\\n        // solium-disable-next-line max-len\\n        require(ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0, \\\"Required value is invalid for the current owners count\\\");\\n        _;\\n    }\\n\\n    /// @dev Fallback function allows to deposit ether.\\n    function()\\n        external\\n        payable\\n    {\\n        if (msg.value > 0)\\n            emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /*\\n     * Public functions\\n     */\\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\\n    /// @param _owners List of initial owners.\\n    /// @param _required Number of required confirmations.\\n    constructor(address[] memory _owners, uint _required)\\n        public\\n        validRequirement(_owners.length, _required)\\n    {\\n        for (uint i = 0; i < _owners.length; i++) {\\n            require(!isOwner[_owners[i]] && _owners[i] != address(0), \\\"Owners addresses are invalid\\\");\\n            isOwner[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        required = _required;\\n    }\\n\\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of new owner.\\n    function addOwner(address owner)\\n        public\\n        onlyWallet\\n        ownerDoesNotExist(owner)\\n        notNull(owner)\\n        validRequirement(owners.length + 1, required)\\n    {\\n        isOwner[owner] = true;\\n        owners.push(owner);\\n        emit OwnerAddition(owner);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner)\\n        public\\n        onlyWallet\\n        ownerExists(owner)\\n    {\\n        isOwner[owner] = false;\\n        for (uint i = 0; i < owners.length - 1; i++)\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                break;\\n            }\\n        owners.length -= 1;\\n        if (required > owners.length)\\n            changeRequirement(owners.length);\\n        emit OwnerRemoval(owner);\\n    }\\n\\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner to be replaced.\\n    /// @param newOwner Address of new owner.\\n    function replaceOwner(address owner, address newOwner)\\n        public\\n        onlyWallet\\n        ownerExists(owner)\\n        ownerDoesNotExist(newOwner)\\n    {\\n        for (uint i = 0; i < owners.length; i++)\\n            if (owners[i] == owner) {\\n                owners[i] = newOwner;\\n                break;\\n            }\\n        isOwner[owner] = false;\\n        isOwner[newOwner] = true;\\n        emit OwnerRemoval(owner);\\n        emit OwnerAddition(newOwner);\\n    }\\n\\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\\n    /// @param _required Number of required confirmations.\\n    function changeRequirement(uint _required)\\n        public\\n        onlyWallet\\n        validRequirement(owners.length, _required)\\n    {\\n        required = _required;\\n        emit RequirementChange(_required);\\n    }\\n\\n    /// @dev Allows an owner to submit and confirm a transaction.\\n    /// @param destination Transaction target address.\\n    /// @param value Transaction ether value.\\n    /// @param data Transaction data payload.\\n    /// @return Returns transaction ID.\\n    function submitTransaction(address destination, uint value, bytes memory data)\\n        public\\n        returns (uint transactionId)\\n    {\\n        transactionId = addTransaction(destination, value, data);\\n        confirmTransaction(transactionId);\\n    }\\n\\n    /// @dev Allows an owner to confirm a transaction.\\n    /// @param transactionId Transaction ID.\\n    function confirmTransaction(uint transactionId)\\n        public\\n        ownerExists(msg.sender)\\n        transactionExists(transactionId)\\n        notConfirmed(transactionId, msg.sender)\\n    {\\n        confirmations[transactionId][msg.sender] = true;\\n        emit Confirmation(msg.sender, transactionId);\\n        executeTransaction(transactionId);\\n    }\\n\\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\\n    /// @param transactionId Transaction ID.\\n    function revokeConfirmation(uint transactionId)\\n        public\\n        ownerExists(msg.sender)\\n        confirmed(transactionId, msg.sender)\\n        notExecuted(transactionId)\\n    {\\n        confirmations[transactionId][msg.sender] = false;\\n        emit Revocation(msg.sender, transactionId);\\n    }\\n\\n    /// @dev Allows anyone to execute a confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    function executeTransaction(uint transactionId)\\n        public\\n        ownerExists(msg.sender)\\n        confirmed(transactionId, msg.sender)\\n        notExecuted(transactionId)\\n    {\\n        if (isConfirmed(transactionId)) {\\n            Transaction storage txn = transactions[transactionId];\\n            txn.executed = true;\\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\\n                emit Execution(transactionId);\\n            else {\\n                emit ExecutionFailure(transactionId);\\n                txn.executed = false;\\n            }\\n        }\\n    }\\n\\n    // call has been separated into its own function in order to take advantage\\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\\n    function external_call(address destination, uint value, uint dataLength, bytes memory data) internal returns (bool) {\\n        bool result;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            let x := mload(0x40)   // \\\"Allocate\\\" memory for output (0x40 is where \\\"free memory\\\" pointer is stored by convention)\\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\\n            result := call(\\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\\n                destination,\\n                value,\\n                d,\\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\\n                x,\\n                0                  // Output is ignored, therefore the output size is zero\\n            )\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Returns the confirmation status of a transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return Confirmation status.\\n    function isConfirmed(uint transactionId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint count = 0;\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (confirmations[transactionId][owners[i]])\\n                count += 1;\\n            if (count == required)\\n                return true;\\n        }\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\\n    /// @param destination Transaction target address.\\n    /// @param value Transaction ether value.\\n    /// @param data Transaction data payload.\\n    /// @return Returns transaction ID.\\n    function addTransaction(address destination, uint value, bytes memory data)\\n        internal\\n        notNull(destination)\\n        returns (uint transactionId)\\n    {\\n        transactionId = transactionCount;\\n        transactions[transactionId] = Transaction({\\n            destination: destination,\\n            value: value,\\n            data: data,\\n            executed: false\\n        });\\n        transactionCount += 1;\\n        emit Submission(transactionId);\\n    }\\n\\n    /*\\n     * Web3 call functions\\n     */\\n    /// @dev Returns number of confirmations of a transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return Number of confirmations.\\n    function getConfirmationCount(uint transactionId)\\n        public\\n        view\\n        returns (uint count)\\n    {\\n        for (uint i = 0; i < owners.length; i++) {\\n            if (confirmations[transactionId][owners[i]]) {\\n                count += 1;\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns total number of transactions after filers are applied.\\n    /// @param pending Include pending transactions.\\n    /// @param executed Include executed transactions.\\n    /// @return Total number of transactions after filters are applied.\\n    function getTransactionCount(bool pending, bool executed)\\n        public\\n        view\\n        returns (uint count)\\n    {\\n        for (uint i = 0; i < transactionCount; i++) {\\n            if ( pending && !transactions[i].executed || executed && transactions[i].executed) {\\n                count += 1;\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns list of owners.\\n    /// @return List of owner addresses.\\n    function getOwners()\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return owners;\\n    }\\n\\n    /// @dev Returns array with owner addresses, which confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return Returns array of owner addresses.\\n    function getConfirmations(uint transactionId)\\n        public\\n        view\\n        returns (address[] memory _confirmations)\\n    {\\n        address[] memory confirmationsTemp = new address[](owners.length);\\n        uint count = 0;\\n        uint i;\\n        for (i = 0; i < owners.length; i++)\\n            if (confirmations[transactionId][owners[i]]) {\\n                confirmationsTemp[count] = owners[i];\\n                count += 1;\\n            }\\n        _confirmations = new address[](count);\\n        for (i = 0; i < count; i++)\\n            _confirmations[i] = confirmationsTemp[i];\\n    }\\n\\n    /// @dev Returns list of transaction IDs in defined range.\\n    /// @param from Index start position of transaction array.\\n    /// @param to Index end position of transaction array.\\n    /// @param pending Include pending transactions.\\n    /// @param executed Include executed transactions.\\n    /// @return Returns array of transaction IDs.\\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\\n        public\\n        view\\n        returns (uint[] memory _transactionIds)\\n    {\\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\\n        uint count = 0;\\n        uint i;\\n        for (i = 0; i < transactionCount; i++)\\n            if (   pending && !transactions[i].executed || executed && transactions[i].executed)\\n            {\\n                transactionIdsTemp[count] = i;\\n                count += 1;\\n            }\\n        _transactionIds = new uint[](to - from);\\n        for (i = from; i < to; i++)\\n            _transactionIds[i - from] = transactionIdsTemp[i];\\n    }\\n}\",\"keccak256\":\"0x84dbe9e79e869c86d99a6d0d7434fdef51488aae5365c1ed6b9e818e22caa5d2\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001ee538038062001ee5833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b50505050919091016040525060200151835190925090508160328211801590620000e55750818111155b8015620000f157508015155b8015620000fd57508115155b6200013a5760405162461bcd60e51b815260040180806020018281038252603681526020018062001eaf6036913960400191505060405180910390fd5b60005b84518110156200025457600260008683815181106200015857fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16158015620001b4575060006001600160a01b0316858281518110620001a057fe5b60200260200101516001600160a01b031614155b62000206576040805162461bcd60e51b815260206004820152601c60248201527f4f776e657273206164647265737365732061726520696e76616c696400000000604482015290519081900360640190fd5b6001600260008784815181106200021957fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016200013d565b5083516200026a90600390602087019062000277565b505050600455506200030b565b828054828255906000526020600020908101928215620002cf579160200282015b82811115620002cf57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000298565b50620002dd929150620002e1565b5090565b6200030891905b80821115620002dd5780546001600160a01b0319168155600101620002e8565b90565b611b94806200031b6000396000f3fe60806040526004361061012a5760003560e01c8063a0e67e2b116100ab578063c01a8c841161006f578063c01a8c8414610534578063c64274741461055e578063d74f8edd14610626578063dc8452cd1461063b578063e20056e614610650578063ee22610b1461068b5761012a565b8063a0e67e2b14610426578063a8abe69a1461048b578063b5dc40c3146104cb578063b77bf600146104f5578063ba51a6df1461050a5761012a565b806354741525116100f2578063547415251461028c5780637065cb48146102d2578063784547a7146103055780638b51d13f1461032f5780639ace38c2146103595761012a565b8063025e7c2714610169578063173825d9146101af57806320ea8d86146101e25780632f54bf6e1461020c5780633411c81c14610253575b34156101675760408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b005b34801561017557600080fd5b506101936004803603602081101561018c57600080fd5b50356106b5565b604080516001600160a01b039092168252519081900360200190f35b3480156101bb57600080fd5b50610167600480360360208110156101d257600080fd5b50356001600160a01b03166106dc565b3480156101ee57600080fd5b506101676004803603602081101561020557600080fd5b50356108bc565b34801561021857600080fd5b5061023f6004803603602081101561022f57600080fd5b50356001600160a01b0316610a22565b604080519115158252519081900360200190f35b34801561025f57600080fd5b5061023f6004803603604081101561027657600080fd5b50803590602001356001600160a01b0316610a37565b34801561029857600080fd5b506102c0600480360360408110156102af57600080fd5b508035151590602001351515610a57565b60408051918252519081900360200190f35b3480156102de57600080fd5b50610167600480360360208110156102f557600080fd5b50356001600160a01b0316610ac3565b34801561031157600080fd5b5061023f6004803603602081101561032857600080fd5b5035610ccc565b34801561033b57600080fd5b506102c06004803603602081101561035257600080fd5b5035610d53565b34801561036557600080fd5b506103836004803603602081101561037c57600080fd5b5035610dc2565b60405180856001600160a01b03166001600160a01b031681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156103e85781810151838201526020016103d0565b50505050905090810190601f1680156104155780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561043257600080fd5b5061043b610e80565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561047757818101518382015260200161045f565b505050509050019250505060405180910390f35b34801561049757600080fd5b5061043b600480360360808110156104ae57600080fd5b508035906020810135906040810135151590606001351515610ee3565b3480156104d757600080fd5b5061043b600480360360208110156104ee57600080fd5b503561100e565b34801561050157600080fd5b506102c0611185565b34801561051657600080fd5b506101676004803603602081101561052d57600080fd5b503561118b565b34801561054057600080fd5b506101676004803603602081101561055757600080fd5b5035611278565b34801561056a57600080fd5b506102c06004803603606081101561058157600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156105b157600080fd5b8201836020820111156105c357600080fd5b803590602001918460018302840111640100000000831117156105e557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506113ef945050505050565b34801561063257600080fd5b506102c061140e565b34801561064757600080fd5b506102c0611413565b34801561065c57600080fd5b506101676004803603604081101561067357600080fd5b506001600160a01b0381358116916020013516611419565b34801561069757600080fd5b50610167600480360360208110156106ae57600080fd5b503561164d565b600381815481106106c257fe5b6000918252602090912001546001600160a01b0316905081565b333014610726576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481dd85b1b195d08185b1b1bddd959606a1b604482015290519081900360640190fd5b6001600160a01b038116600090815260026020526040902054819060ff16610783576040805162461bcd60e51b81526020600482015260186024820152600080516020611b40833981519152604482015290519081900360640190fd5b6001600160a01b0382166000908152600260205260408120805460ff191690555b6003546000190181101561085757826001600160a01b0316600382815481106107c957fe5b6000918252602090912001546001600160a01b0316141561084f576003805460001981019081106107f657fe5b600091825260209091200154600380546001600160a01b03909216918390811061081c57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610857565b6001016107a4565b5060038054600019019061086b90826119fa565b506003546004541115610884576003546108849061118b565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b3360008181526002602052604090205460ff1661090e576040805162461bcd60e51b81526020600482015260186024820152600080516020611b40833981519152604482015290519081900360640190fd5b60008281526001602090815260408083203380855292529091205483919060ff1661096a5760405162461bcd60e51b8152600401808060200182810382526025815260200180611b1b6025913960400191505060405180910390fd5b600084815260208190526040902060030154849060ff16156109d3576040805162461bcd60e51b815260206004820181905260248201527f5472616e73616374696f6e2077617320616c7265616479206578656375746564604482015290519081900360640190fd5b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b60026020526000908152604090205460ff1681565b600160209081526000928352604080842090915290825290205460ff1681565b6000805b600554811015610abc57838015610a84575060008181526020819052604090206003015460ff16155b80610aa85750828015610aa8575060008181526020819052604090206003015460ff165b15610ab4576001820191505b600101610a5b565b5092915050565b333014610b0d576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481dd85b1b195d08185b1b1bddd959606a1b604482015290519081900360640190fd5b6001600160a01b038116600090815260026020526040902054819060ff1615610b78576040805162461bcd60e51b8152602060048201526018602482015277546865206f776e657220616c72656164792065786973747360401b604482015290519081900360640190fd5b816001600160a01b038116610bce576040805162461bcd60e51b8152602060048201526017602482015276416464726573732063616e6e6f7420626520656d70747960481b604482015290519081900360640190fd5b60038054905060010160045460328211158015610beb5750818111155b8015610bf657508015155b8015610c0157508115155b610c3c5760405162461bcd60e51b8152600401808060200182810382526036815260200180611ae56036913960400191505060405180910390fd5b6001600160a01b038516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b600354811015610d4b5760008481526001602052604081206003805491929184908110610cfa57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610d2e576001820191505b600454821415610d4357600192505050610d4e565b600101610cd1565b50505b919050565b6000805b600354811015610dbc5760008381526001602052604081206003805491929184908110610d8057fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610db4576001820191505b600101610d57565b50919050565b6000602081815291815260409081902080546001808301546002808501805487516101009582161595909502600019011691909104601f81018890048802840188019096528583526001600160a01b0390931695909491929190830182828015610e6d5780601f10610e4257610100808354040283529160200191610e6d565b820191906000526020600020905b815481529060010190602001808311610e5057829003601f168201915b5050506003909301549192505060ff1684565b60606003805480602002602001604051908101604052809291908181526020018280548015610ed857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610eba575b505050505090505b90565b606080600554604051908082528060200260200182016040528015610f12578160200160208202803883390190505b5090506000805b600554811015610f9357858015610f42575060008181526020819052604090206003015460ff16155b80610f665750848015610f66575060008181526020819052604090206003015460ff165b15610f8b5780838381518110610f7857fe5b6020026020010181815250506001820191505b600101610f19565b878703604051908082528060200260200182016040528015610fbf578160200160208202803883390190505b5093508790505b8681101561100357828181518110610fda57fe5b60200260200101518489830381518110610ff057fe5b6020908102919091010152600101610fc6565b505050949350505050565b606080600380549050604051908082528060200260200182016040528015611040578160200160208202803883390190505b5090506000805b600354811015611103576000858152600160205260408120600380549192918490811061107057fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156110fb57600381815481106110aa57fe5b9060005260206000200160009054906101000a90046001600160a01b03168383815181106110d457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001820191505b600101611047565b8160405190808252806020026020018201604052801561112d578160200160208202803883390190505b509350600090505b8181101561117d5782818151811061114957fe5b602002602001015184828151811061115d57fe5b6001600160a01b0390921660209283029190910190910152600101611135565b505050919050565b60055481565b3330146111d5576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481dd85b1b195d08185b1b1bddd959606a1b604482015290519081900360640190fd5b60035481603282118015906111ea5750818111155b80156111f557508015155b801561120057508115155b61123b5760405162461bcd60e51b8152600401808060200182810382526036815260200180611ae56036913960400191505060405180910390fd5b60048390556040805184815290517fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9181900360200190a1505050565b3360008181526002602052604090205460ff166112ca576040805162461bcd60e51b81526020600482015260186024820152600080516020611b40833981519152604482015290519081900360640190fd5b60008281526020819052604090205482906001600160a01b0316611335576040805162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e20646f6573206e6f74206578697374000000000000604482015290519081900360640190fd5b60008381526001602090815260408083203380855292529091205484919060ff16156113925760405162461bcd60e51b8152600401808060200182810382526029815260200180611abc6029913960400191505060405180910390fd5b6000858152600160208181526040808420338086529252808420805460ff1916909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a36113e88561164d565b5050505050565b60006113fc8484846118b4565b905061140781611278565b9392505050565b603281565b60045481565b333014611463576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481dd85b1b195d08185b1b1bddd959606a1b604482015290519081900360640190fd5b6001600160a01b038216600090815260026020526040902054829060ff166114c0576040805162461bcd60e51b81526020600482015260186024820152600080516020611b40833981519152604482015290519081900360640190fd5b6001600160a01b038216600090815260026020526040902054829060ff161561152b576040805162461bcd60e51b8152602060048201526018602482015277546865206f776e657220616c72656164792065786973747360401b604482015290519081900360640190fd5b60005b6003548110156115b357846001600160a01b03166003828154811061154f57fe5b6000918252602090912001546001600160a01b031614156115ab57836003828154811061157857fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506115b3565b60010161152e565b506001600160a01b03808516600081815260026020526040808220805460ff1990811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b3360008181526002602052604090205460ff1661169f576040805162461bcd60e51b81526020600482015260186024820152600080516020611b40833981519152604482015290519081900360640190fd5b60008281526001602090815260408083203380855292529091205483919060ff166116fb5760405162461bcd60e51b8152600401808060200182810382526025815260200180611b1b6025913960400191505060405180910390fd5b600084815260208190526040902060030154849060ff1615611764576040805162461bcd60e51b815260206004820181905260248201527f5472616e73616374696f6e2077617320616c7265616479206578656375746564604482015290519081900360640190fd5b61176d85610ccc565b156113e8576000858152602081815260409182902060038101805460ff19166001908117909155815481830154600280850180548851601f60001997831615610100029790970190911692909204948501879004870282018701909752838152939561183f956001600160a01b039093169491939283908301828280156118355780601f1061180a57610100808354040283529160200191611835565b820191906000526020600020905b81548152906001019060200180831161181857829003601f168201915b50505050506119d7565b156118745760405186907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a26118ac565b60405186907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a260038101805460ff191690555b505050505050565b6000836001600160a01b03811661190c576040805162461bcd60e51b8152602060048201526017602482015276416464726573732063616e6e6f7420626520656d70747960481b604482015290519081900360640190fd5b600554604080516080810182526001600160a01b038881168252602080830189815283850189815260006060860181905287815280845295909520845181546001600160a01b0319169416939093178355516001830155925180519496509193909261197f926002850192910190611a23565b50606091909101516003909101805460ff191691151591909117905560058054600101905560405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b815481835581811115611a1e57600083815260209020611a1e918101908301611aa1565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a6457805160ff1916838001178555611a91565b82800160010185558215611a91579182015b82811115611a91578251825591602001919060010190611a76565b50611a9d929150611aa1565b5090565b610ee091905b80821115611a9d5760008155600101611aa756fe5472616e73616374696f6e20697320616c726561647920636f6e6669726d6564206279206f776e657252657175697265642076616c756520697320696e76616c696420666f72207468652063757272656e74206f776e65727320636f756e745472616e73616374696f6e206973206e6f7420636f6e6669726d6564206279206f776e6572546865206f776e657220646f6573206e6f742065786973740000000000000000a265627a7a72315820af0b5f1eb505d057fd18687b6f46c310c04477aa7d524a8d5b1119a27dbbb28c64736f6c6343000511003252657175697265642076616c756520697320696e76616c696420666f72207468652063757272656e74206f776e65727320636f756e74",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c8063a0e67e2b116100ab578063c01a8c841161006f578063c01a8c8414610534578063c64274741461055e578063d74f8edd14610626578063dc8452cd1461063b578063e20056e614610650578063ee22610b1461068b5761012a565b8063a0e67e2b14610426578063a8abe69a1461048b578063b5dc40c3146104cb578063b77bf600146104f5578063ba51a6df1461050a5761012a565b806354741525116100f2578063547415251461028c5780637065cb48146102d2578063784547a7146103055780638b51d13f1461032f5780639ace38c2146103595761012a565b8063025e7c2714610169578063173825d9146101af57806320ea8d86146101e25780632f54bf6e1461020c5780633411c81c14610253575b34156101675760408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b005b34801561017557600080fd5b506101936004803603602081101561018c57600080fd5b50356106b5565b604080516001600160a01b039092168252519081900360200190f35b3480156101bb57600080fd5b50610167600480360360208110156101d257600080fd5b50356001600160a01b03166106dc565b3480156101ee57600080fd5b506101676004803603602081101561020557600080fd5b50356108bc565b34801561021857600080fd5b5061023f6004803603602081101561022f57600080fd5b50356001600160a01b0316610a22565b604080519115158252519081900360200190f35b34801561025f57600080fd5b5061023f6004803603604081101561027657600080fd5b50803590602001356001600160a01b0316610a37565b34801561029857600080fd5b506102c0600480360360408110156102af57600080fd5b508035151590602001351515610a57565b60408051918252519081900360200190f35b3480156102de57600080fd5b50610167600480360360208110156102f557600080fd5b50356001600160a01b0316610ac3565b34801561031157600080fd5b5061023f6004803603602081101561032857600080fd5b5035610ccc565b34801561033b57600080fd5b506102c06004803603602081101561035257600080fd5b5035610d53565b34801561036557600080fd5b506103836004803603602081101561037c57600080fd5b5035610dc2565b60405180856001600160a01b03166001600160a01b031681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156103e85781810151838201526020016103d0565b50505050905090810190601f1680156104155780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561043257600080fd5b5061043b610e80565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561047757818101518382015260200161045f565b505050509050019250505060405180910390f35b34801561049757600080fd5b5061043b600480360360808110156104ae57600080fd5b508035906020810135906040810135151590606001351515610ee3565b3480156104d757600080fd5b5061043b600480360360208110156104ee57600080fd5b503561100e565b34801561050157600080fd5b506102c0611185565b34801561051657600080fd5b506101676004803603602081101561052d57600080fd5b503561118b565b34801561054057600080fd5b506101676004803603602081101561055757600080fd5b5035611278565b34801561056a57600080fd5b506102c06004803603606081101561058157600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156105b157600080fd5b8201836020820111156105c357600080fd5b803590602001918460018302840111640100000000831117156105e557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506113ef945050505050565b34801561063257600080fd5b506102c061140e565b34801561064757600080fd5b506102c0611413565b34801561065c57600080fd5b506101676004803603604081101561067357600080fd5b506001600160a01b0381358116916020013516611419565b34801561069757600080fd5b50610167600480360360208110156106ae57600080fd5b503561164d565b600381815481106106c257fe5b6000918252602090912001546001600160a01b0316905081565b333014610726576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481dd85b1b195d08185b1b1bddd959606a1b604482015290519081900360640190fd5b6001600160a01b038116600090815260026020526040902054819060ff16610783576040805162461bcd60e51b81526020600482015260186024820152600080516020611b40833981519152604482015290519081900360640190fd5b6001600160a01b0382166000908152600260205260408120805460ff191690555b6003546000190181101561085757826001600160a01b0316600382815481106107c957fe5b6000918252602090912001546001600160a01b0316141561084f576003805460001981019081106107f657fe5b600091825260209091200154600380546001600160a01b03909216918390811061081c57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610857565b6001016107a4565b5060038054600019019061086b90826119fa565b506003546004541115610884576003546108849061118b565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b3360008181526002602052604090205460ff1661090e576040805162461bcd60e51b81526020600482015260186024820152600080516020611b40833981519152604482015290519081900360640190fd5b60008281526001602090815260408083203380855292529091205483919060ff1661096a5760405162461bcd60e51b8152600401808060200182810382526025815260200180611b1b6025913960400191505060405180910390fd5b600084815260208190526040902060030154849060ff16156109d3576040805162461bcd60e51b815260206004820181905260248201527f5472616e73616374696f6e2077617320616c7265616479206578656375746564604482015290519081900360640190fd5b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b60026020526000908152604090205460ff1681565b600160209081526000928352604080842090915290825290205460ff1681565b6000805b600554811015610abc57838015610a84575060008181526020819052604090206003015460ff16155b80610aa85750828015610aa8575060008181526020819052604090206003015460ff165b15610ab4576001820191505b600101610a5b565b5092915050565b333014610b0d576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481dd85b1b195d08185b1b1bddd959606a1b604482015290519081900360640190fd5b6001600160a01b038116600090815260026020526040902054819060ff1615610b78576040805162461bcd60e51b8152602060048201526018602482015277546865206f776e657220616c72656164792065786973747360401b604482015290519081900360640190fd5b816001600160a01b038116610bce576040805162461bcd60e51b8152602060048201526017602482015276416464726573732063616e6e6f7420626520656d70747960481b604482015290519081900360640190fd5b60038054905060010160045460328211158015610beb5750818111155b8015610bf657508015155b8015610c0157508115155b610c3c5760405162461bcd60e51b8152600401808060200182810382526036815260200180611ae56036913960400191505060405180910390fd5b6001600160a01b038516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b600354811015610d4b5760008481526001602052604081206003805491929184908110610cfa57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610d2e576001820191505b600454821415610d4357600192505050610d4e565b600101610cd1565b50505b919050565b6000805b600354811015610dbc5760008381526001602052604081206003805491929184908110610d8057fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610db4576001820191505b600101610d57565b50919050565b6000602081815291815260409081902080546001808301546002808501805487516101009582161595909502600019011691909104601f81018890048802840188019096528583526001600160a01b0390931695909491929190830182828015610e6d5780601f10610e4257610100808354040283529160200191610e6d565b820191906000526020600020905b815481529060010190602001808311610e5057829003601f168201915b5050506003909301549192505060ff1684565b60606003805480602002602001604051908101604052809291908181526020018280548015610ed857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610eba575b505050505090505b90565b606080600554604051908082528060200260200182016040528015610f12578160200160208202803883390190505b5090506000805b600554811015610f9357858015610f42575060008181526020819052604090206003015460ff16155b80610f665750848015610f66575060008181526020819052604090206003015460ff165b15610f8b5780838381518110610f7857fe5b6020026020010181815250506001820191505b600101610f19565b878703604051908082528060200260200182016040528015610fbf578160200160208202803883390190505b5093508790505b8681101561100357828181518110610fda57fe5b60200260200101518489830381518110610ff057fe5b6020908102919091010152600101610fc6565b505050949350505050565b606080600380549050604051908082528060200260200182016040528015611040578160200160208202803883390190505b5090506000805b600354811015611103576000858152600160205260408120600380549192918490811061107057fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156110fb57600381815481106110aa57fe5b9060005260206000200160009054906101000a90046001600160a01b03168383815181106110d457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001820191505b600101611047565b8160405190808252806020026020018201604052801561112d578160200160208202803883390190505b509350600090505b8181101561117d5782818151811061114957fe5b602002602001015184828151811061115d57fe5b6001600160a01b0390921660209283029190910190910152600101611135565b505050919050565b60055481565b3330146111d5576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481dd85b1b195d08185b1b1bddd959606a1b604482015290519081900360640190fd5b60035481603282118015906111ea5750818111155b80156111f557508015155b801561120057508115155b61123b5760405162461bcd60e51b8152600401808060200182810382526036815260200180611ae56036913960400191505060405180910390fd5b60048390556040805184815290517fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9181900360200190a1505050565b3360008181526002602052604090205460ff166112ca576040805162461bcd60e51b81526020600482015260186024820152600080516020611b40833981519152604482015290519081900360640190fd5b60008281526020819052604090205482906001600160a01b0316611335576040805162461bcd60e51b815260206004820152601a60248201527f5472616e73616374696f6e20646f6573206e6f74206578697374000000000000604482015290519081900360640190fd5b60008381526001602090815260408083203380855292529091205484919060ff16156113925760405162461bcd60e51b8152600401808060200182810382526029815260200180611abc6029913960400191505060405180910390fd5b6000858152600160208181526040808420338086529252808420805460ff1916909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a36113e88561164d565b5050505050565b60006113fc8484846118b4565b905061140781611278565b9392505050565b603281565b60045481565b333014611463576040805162461bcd60e51b815260206004820152601360248201527213db9b1e481dd85b1b195d08185b1b1bddd959606a1b604482015290519081900360640190fd5b6001600160a01b038216600090815260026020526040902054829060ff166114c0576040805162461bcd60e51b81526020600482015260186024820152600080516020611b40833981519152604482015290519081900360640190fd5b6001600160a01b038216600090815260026020526040902054829060ff161561152b576040805162461bcd60e51b8152602060048201526018602482015277546865206f776e657220616c72656164792065786973747360401b604482015290519081900360640190fd5b60005b6003548110156115b357846001600160a01b03166003828154811061154f57fe5b6000918252602090912001546001600160a01b031614156115ab57836003828154811061157857fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506115b3565b60010161152e565b506001600160a01b03808516600081815260026020526040808220805460ff1990811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b3360008181526002602052604090205460ff1661169f576040805162461bcd60e51b81526020600482015260186024820152600080516020611b40833981519152604482015290519081900360640190fd5b60008281526001602090815260408083203380855292529091205483919060ff166116fb5760405162461bcd60e51b8152600401808060200182810382526025815260200180611b1b6025913960400191505060405180910390fd5b600084815260208190526040902060030154849060ff1615611764576040805162461bcd60e51b815260206004820181905260248201527f5472616e73616374696f6e2077617320616c7265616479206578656375746564604482015290519081900360640190fd5b61176d85610ccc565b156113e8576000858152602081815260409182902060038101805460ff19166001908117909155815481830154600280850180548851601f60001997831615610100029790970190911692909204948501879004870282018701909752838152939561183f956001600160a01b039093169491939283908301828280156118355780601f1061180a57610100808354040283529160200191611835565b820191906000526020600020905b81548152906001019060200180831161181857829003601f168201915b50505050506119d7565b156118745760405186907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a26118ac565b60405186907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a260038101805460ff191690555b505050505050565b6000836001600160a01b03811661190c576040805162461bcd60e51b8152602060048201526017602482015276416464726573732063616e6e6f7420626520656d70747960481b604482015290519081900360640190fd5b600554604080516080810182526001600160a01b038881168252602080830189815283850189815260006060860181905287815280845295909520845181546001600160a01b0319169416939093178355516001830155925180519496509193909261197f926002850192910190611a23565b50606091909101516003909101805460ff191691151591909117905560058054600101905560405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b815481835581811115611a1e57600083815260209020611a1e918101908301611aa1565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a6457805160ff1916838001178555611a91565b82800160010185558215611a91579182015b82811115611a91578251825591602001919060010190611a76565b50611a9d929150611aa1565b5090565b610ee091905b80821115611a9d5760008155600101611aa756fe5472616e73616374696f6e20697320616c726561647920636f6e6669726d6564206279206f776e657252657175697265642076616c756520697320696e76616c696420666f72207468652063757272656e74206f776e65727320636f756e745472616e73616374696f6e206973206e6f7420636f6e6669726d6564206279206f776e6572546865206f776e657220646f6573206e6f742065786973740000000000000000a265627a7a72315820af0b5f1eb505d057fd18687b6f46c310c04477aa7d524a8d5b1119a27dbbb28c64736f6c63430005110032",
  "devdoc": {
    "author": "Stefan George - <stefan.george@consensys.net>",
    "methods": {
      "addOwner(address)": {
        "details": "Allows to add a new owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of new owner."
        }
      },
      "changeRequirement(uint256)": {
        "details": "Allows to change the number of required confirmations. Transaction has to be sent by wallet.",
        "params": {
          "_required": "Number of required confirmations."
        }
      },
      "confirmTransaction(uint256)": {
        "details": "Allows an owner to confirm a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "constructor": {
        "details": "Contract constructor sets initial owners and required number of confirmations.",
        "params": {
          "_owners": "List of initial owners.",
          "_required": "Number of required confirmations."
        }
      },
      "executeTransaction(uint256)": {
        "details": "Allows anyone to execute a confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "getConfirmationCount(uint256)": {
        "details": "Returns number of confirmations of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Number of confirmations."
      },
      "getConfirmations(uint256)": {
        "details": "Returns array with owner addresses, which confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Returns array of owner addresses."
      },
      "getOwners()": {
        "details": "Returns list of owners.",
        "return": "List of owner addresses."
      },
      "getTransactionCount(bool,bool)": {
        "details": "Returns total number of transactions after filers are applied.",
        "params": {
          "executed": "Include executed transactions.",
          "pending": "Include pending transactions."
        },
        "return": "Total number of transactions after filters are applied."
      },
      "getTransactionIds(uint256,uint256,bool,bool)": {
        "details": "Returns list of transaction IDs in defined range.",
        "params": {
          "executed": "Include executed transactions.",
          "from": "Index start position of transaction array.",
          "pending": "Include pending transactions.",
          "to": "Index end position of transaction array."
        },
        "return": "Returns array of transaction IDs."
      },
      "isConfirmed(uint256)": {
        "details": "Returns the confirmation status of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "return": "Confirmation status."
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "replaceOwner(address,address)": {
        "details": "Allows to replace an owner with a new owner. Transaction has to be sent by wallet.",
        "params": {
          "newOwner": "Address of new owner.",
          "owner": "Address of owner to be replaced."
        }
      },
      "revokeConfirmation(uint256)": {
        "details": "Allows an owner to revoke a confirmation for a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "submitTransaction(address,uint256,bytes)": {
        "details": "Allows an owner to submit and confirm a transaction.",
        "params": {
          "data": "Transaction data payload.",
          "destination": "Transaction target address.",
          "value": "Transaction ether value."
        },
        "return": "Returns transaction ID."
      }
    },
    "title": "Multisignature wallet - Allows multiple parties to agree on transactions before execution."
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 50,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "transactions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Transaction)76_storage)"
      },
      {
        "astId": 56,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "confirmations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 60,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "isOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 63,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "owners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "required",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 67,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "transactionCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Transaction)76_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiSigWallet.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)76_storage"
      },
      "t_struct(Transaction)76_storage": {
        "encoding": "inplace",
        "label": "struct MultiSigWallet.Transaction",
        "members": [
          {
            "astId": 69,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "destination",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 71,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 73,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 75,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "executed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}