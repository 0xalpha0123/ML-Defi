#!/bin/bash

set -eo pipefail

dir=`dirname $0`
proj_root="$dir/.."
network=${NETWORK:-rsk}
verbose=${verbose:-}
# example to skip scenarios 
# scenarios=${scenarios:-AddReservesScen|BorrowBalanceScen|BorrowEthScen|BorrowScen|BreakLiquidateScen|ChangeDelegateScen|EnterExitMarketsScen|ExchangeRateScen|FeeScen|Flywheel/FlywheelScen|HypotheticalAccountLiquidityScen|MCDaiScen|MintScen|MintWBTCScen|PriceOracleProxyScen|RedeemUnderlyingWBTCScen|RedeemWBTCScen|ReduceReservesScen|ReEntryScen|RepayBorrowScen|RepayBorrowWBTCScen|SeizeScen|SetComptrollerScen|TetherScenUnitrollerScen|RedeemUnderlyingEthScen|RedeemUnderlyingScen}
scenarios=${scenarios:-}

debug_args="-n --inspect" #add "debugger" statements to javascript and interact with running code in repl found at chrome://inspect
[[ -z $DEBUG ]] && debug_args=""

# Compile scenario runner
[[ -z $NO_TSC ]] && "$proj_root/scenario/script/tsc"

# Build scenario stubs
[[ -z $NO_BUILD_STUB ]] && "$proj_root/script/compile"

# Build scenario stubs
[[ -z $NO_BUILD_SCEN ]] && "$proj_root/script/build_scenarios"

[[ -n $NO_RUN ]] && exit 0

#define approved tests
defaultArgs=('tests/Lens/RlendingLensTest.js' 'tests/Scenarios/UnitrollerScenTest.js' 'tests/Scenarios/BorrowScenTest.js' 'tests/Scenarios/MintScenTest.js' 'tests/Scenarios/RedeemUnderlyingEthScenTest.js' 'tests/Scenarios/HypotheticalAccountLiquidityScenTest.js' 'tests/Scenarios/RedeemUnderlyingWBTCScenTest.js' 'tests/Scenarios/AddReservesScenTest.js' 'tests/Scenarios/ReduceReservesScenTest.js' 'tests/Scenarios/PriceOracleProxyScenTest.js' 'tests/Scenarios/RedeemUnderlyingScenTest.js' 'tests/Scenarios/RepayBorrowWBTCScenTest.js' 'tests/Scenarios/SeizeScenTest.js' 'tests/Scenarios/Flywheel/FlywheelScenTest.js' 'tests/Scenarios/BreakLiquidateScenTest.js' 'tests/Scenarios/ReEntryScenTest.js' 'tests/Scenarios/RedeemEthScenTest.js' 'tests/Scenarios/FeeScenTest.js' 'tests/Scenarios/MCDaiScenTest.js' 'tests/Scenarios/BorrowBalanceScenTest.js' 'tests/Scenarios/CTokenAdminScenTest.js' 'tests/Scenarios/RepayBorrowScenTest.js' 'tests/Scenarios/SetComptrollerScenTest.js' 'tests/Scenarios/ExchangeRateScenTest.js' 'tests/Scenarios/TokenTransferScenTest.js' 'tests/Scenarios/TetherScenTest.js' 'tests/Scenarios/RedeemWBTCScenTest.js' 'tests/Scenarios/ChangeDelegateScenTest.js' 'tests/Scenarios/RedeemScenTest.js' 'tests/Scenarios/BorrowEthScenTest.js' 'tests/Scenarios/EnterExitMarketsScenTest.js' 'tests/Scenarios/MintWBTCScenTest.js' 'tests/Scenarios/BorrowWBTCScenTest.js' 'tests/Scenarios/InKindLiquidationScenTest.js' 'tests/Tokens/mintAndRedeemTest.js' 'tests/Tokens/borrowAndRepayTest.js' 'tests/Tokens/cTokenTest.js' 'tests/Tokens/setInterestRateModelTest.js' 'tests/Tokens/setComptrollerTest.js' 'tests/Tokens/mintAndRedeemCEtherTest.js' 'tests/Tokens/adminTest.js' 'tests/Tokens/liquidateTest.js' 'tests/Tokens/borrowAndRepayCEtherTest.js' 'tests/Tokens/reservesTest.js' 'tests/Tokens/safeTokenTest.js' 'tests/Tokens/accrueInterestTest.js' 'tests/Tokens/transferTest.js' 'tests/Comptroller/unitrollerTest.js' 'tests/Comptroller/proxiedComptrollerV1Test.js' 'tests/Comptroller/assetsListTest.js' 'tests/Comptroller/accountLiquidityTest.js' 'tests/Comptroller/comptrollerTest.js' 'tests/Comptroller/adminTest.js' 'tests/Comptroller/pauseGuardianTest.js' 'tests/Comptroller/liquidateCalculateAmountSeizeTest.js' 'tests/MaximillionTest.js' 'tests/Models/InterestRateModelTest.js' 'tests/Models/DAIInterestRateModelTest.js' 'tests/CompilerTest.js' 'tests/PriceOracleProxyTest.js')
args=()
mapped=()
pass=0

#set inputs args
for arg in "$@"; do
  map=`node -e "console.log(\"$arg\".replace(/spec\/scenario\/(.*).scen/i, \"tests/Scenarios/\\$1ScenTest.js\"))"`
  args+=("$map")
done

##validate test to run 
if [ ! -z "$args" ]
then
  for value in "${args[@]}"; do
    #value exist in defaultArgs
    if [[ " ${defaultArgs[@]} " =~ " ${value} " ]]; then
      mapped+=("$value")
    else
      echo -e "\e[31m" $value "is not allowed to rsk\e[0m"
    fi
  done
    #set mapped defaultsArgs
    defaultArgs=($mapped)
fi

echo -e "Test to run: " "${#defaultArgs[@]}" "\n\n"
#defaults args run one per once
for arg in "${defaultArgs[@]}"; do
#TODO get fail response and save in log
  proj_root="$proj_root" verbose="$verbose" network="$network" npx $debug_args saddle test "${arg[@]}"
done

