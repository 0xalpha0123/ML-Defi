
Test "Check Name"
    RLEN Deploy Geoff
    Assert Equal (RLEN Name) "rLending"

Test "Check Symbol"
    RLEN Deploy Geoff
    Assert Equal (RLEN Symbol) "rLEN"

Test "Check Decimals"
    RLEN Deploy Geoff
    Assert Equal (RLEN Decimals) 18

Test "Check Total Supply"
    RLEN Deploy Geoff
    Assert Equal (RLEN TotalSupply) 10000000e18

Test "Check account receives Total Supply after deploy and emits Transfer event"
    RLEN Deploy Geoff
    Assert Equal (RLEN TokenBalance Geoff) 10000000e18
    Assert Log Transfer (from (Address Zero)) (to (Address Geoff)) (amount "10000000000000000000000000")

Test "Check approve sets correct approval and emits Approval event"
    RLEN Deploy Geoff
    From Geoff (RLEN Approve Jared 10)
    Assert Equal (RLEN Allowance Geoff Jared) 10
    Assert Log Approval (owner (Address Geoff)) (spender (Address Jared)) (amount "10")

Test "Check approve with bad allowance reverts"
    RLEN Deploy Geoff
    AllowFailures
    From Geoff (RLEN Approve Jared 1e70)
    Assert Revert "revert RLEN::approve: amount exceeds 96 bits"

Test "Check transfer updates balances correctly, emits Transfer event, and returns true"
    RLEN Deploy Geoff
    From Geoff (RLEN Transfer Jared 10)
    Assert Equal (RLEN TokenBalance Geoff) 9999999999999999999999990
    Assert Equal (RLEN TokenBalance Jared) 10
    Assert Log Transfer (from (Address Geoff)) (to (Address Jared)) (amount "10")

Test "Check self-transfer updates balances correctly, emits Transfer event, and returns true"
    RLEN Deploy Geoff
    Expect Changes (RLEN VotesLength Geoff) Zero
    Expect Changes (RLEN TokenBalance Geoff) Zero
    From Geoff (RLEN Transfer Geoff 10)
    Assert Log Transfer (from (Address Geoff)) (to (Address Geoff)) (amount "10")
    Expect Changes (RLEN VotesLength Geoff) Zero
    Expect Changes (RLEN TokenBalance Geoff) Zero
    From Geoff (RLEN Transfer Geoff 0)
    Assert Log Transfer (from (Address Geoff)) (to (Address Geoff)) (amount "0")

Test "Check transferFrom with unlimited allowance updates balances correctly, emits Transfer event, and returns true"
    RLEN Deploy Geoff
    From Geoff (RLEN Approve Jared UInt256Max)
    From Jared (RLEN TransferFrom Geoff Jared 10)
    Assert Equal (RLEN TokenBalance Geoff) 9999999999999999999999990
    Assert Equal (RLEN TokenBalance Jared) 10
    Assert Equal (RLEN Allowance Geoff Jared) UInt96Max
    Assert Log Transfer (from (Address Geoff)) (to (Address Jared)) (amount "10")

Test "Check transferFrom with unlimited allowance updates balances correctly, emits Transfer event, and returns true"
    RLEN Deploy Geoff
    From Geoff (RLEN Approve Jared UInt96Max)
    From Jared (RLEN TransferFrom Geoff Jared 10)
    Assert Equal (RLEN TokenBalance Geoff) 9999999999999999999999990
    Assert Equal (RLEN TokenBalance Jared) 10
    Assert Equal (RLEN Allowance Geoff Jared) UInt96Max
    Assert Log Transfer (from (Address Geoff)) (to (Address Jared)) (amount "10")

Test "Check transferFrom with allowance updates balances correctly, emits Transfer event, and returns true"
    RLEN Deploy Geoff
    From Geoff (RLEN Approve Jared 10)
    From Jared (RLEN TransferFrom Geoff Jared 9)
    Assert Equal (RLEN TokenBalance Geoff) 9999999999999999999999991
    Assert Equal (RLEN TokenBalance Jared) 9
    Assert Equal (RLEN Allowance Geoff Jared) 1
    Assert Log Transfer (from (Address Geoff)) (to (Address Jared)) (amount "9")
    Assert Log Approval (owner (Address Geoff)) (spender (Address Jared)) (amount "1")

Test "Check transferFrom reverts with not sufficient allowance"
    RLEN Deploy Geoff
    From Geoff (RLEN Approve Jared 10)
    AllowFailures
    From Jared (RLEN TransferFrom Geoff Jared 11)
    Assert Revert "revert RLEN::transferFrom: transfer amount exceeds spender allowance"

Test "Check transfer reverts when transferring too much"
    RLEN Deploy Geoff
    AllowFailures
    From Geoff (RLEN Transfer Jared 10000001e18)
    Assert Revert "revert RLEN::_transferTokens: transfer amount exceeds balance"

Test "Check transfer reverts when transferring to address 0"
    RLEN Deploy Geoff
    AllowFailures
    From Geoff (RLEN Transfer (Address Zero) 10000000e18)
    Assert Revert "revert RLEN::_transferTokens: cannot transfer to the zero address"

Test "Delegate with zero balance doesn't change votes checkpoints"
    RLEN Deploy Geoff
    Assert Equal (RLEN VotesLength Geoff) 0
    From Jared (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 0
    Assert Log DelegateChanged (delegator (Address Jared)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))

Test "Delegate from address(0) to account with zero checkpoints"
    RLEN Deploy Geoff
    From Geoff (RLEN Transfer Jared 10)
    Assert Equal (RLEN VotesLength Geoff) 0
    From Jared (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 1
    Assert Equal (RLEN GetCurrentVotes Geoff) 10
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Equal (RLEN VotesLength Zero) 0
    Assert Log DelegateChanged (delegator (Address Jared)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "0") (newBalance "10")

Test "Delegate from address(0) to account with existing checkpoints"
    RLEN Deploy Geoff
    From Geoff (RLEN Transfer Jared 10)
    From Geoff (RLEN Transfer Torrey 14)
    Assert Equal (RLEN VotesLength Geoff) 0
    From Jared (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 1
    Assert Equal (RLEN GetCurrentVotes Geoff) 10
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Jared)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "0") (newBalance "10")
    From Torrey (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 2
    Assert Equal (RLEN GetCurrentVotes Geoff) 24
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Equal (RLEN VotesLength Zero) 0
    Assert Log DelegateChanged (delegator (Address Torrey)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "10") (newBalance "24")

Test "Delegate to address(0)"
    RLEN Deploy Geoff
    From Geoff (RLEN Transfer Jared 10)
    From Geoff (RLEN Transfer Torrey 14)
    Assert Equal (RLEN VotesLength Geoff) 0
    From Jared (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 1
    Assert Equal (RLEN GetCurrentVotes Geoff) 10
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Jared)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "0") (newBalance "10")
    From Torrey (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 2
    Assert Equal (RLEN GetCurrentVotes Geoff) 24
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Torrey)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "10") (newBalance "24")
    From Torrey (RLEN Delegate Zero)
    Assert Equal (RLEN VotesLength Geoff) 3
    Assert Equal (RLEN GetCurrentVotes Geoff) 10
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Torrey)) (fromDelegate (Address Geoff)) (toDelegate (Address Zero))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "24") (newBalance "10")
    Assert Equal (RLEN VotesLength Zero) 0

Test "Delegate from one account to another account with zero checkpoints"
    RLEN Deploy Geoff
    From Geoff (RLEN Transfer Jared 10)
    From Geoff (RLEN Transfer Torrey 14)
    Assert Equal (RLEN VotesLength Geoff) 0
    From Jared (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 1
    Assert Equal (RLEN GetCurrentVotes Geoff) 10
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Jared)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "0") (newBalance "10")
    From Torrey (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 2
    Assert Equal (RLEN GetCurrentVotes Geoff) 24
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Equal (RLEN VotesLength Coburn) 0
    Assert Log DelegateChanged (delegator (Address Torrey)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "10") (newBalance "24")
    From Torrey (RLEN Delegate Coburn)
    Assert Equal (RLEN VotesLength Coburn) 1
    Assert Equal (RLEN GetCurrentVotes Coburn) 14
    Assert Equal (RLEN GetCurrentVotesBlock Coburn) LastBlock
    Assert Equal (RLEN VotesLength Geoff) 3
    Assert Equal (RLEN GetCurrentVotes Geoff) 10
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Torrey)) (fromDelegate (Address Geoff)) (toDelegate (Address Coburn))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "24") (newBalance "10")
    Assert Log DelegateVotesChanged (delegate (Address Coburn)) (previousBalance "0") (newBalance "14")

Test "Delegate from one account to another account with multiple checkpoints"
    RLEN Deploy Geoff
    From Geoff (RLEN Transfer Jared 10)
    From Geoff (RLEN Transfer Torrey 14)
    From Geoff (RLEN Transfer Coburn 2)
    Assert Equal (RLEN VotesLength Geoff) 0
    From Jared (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 1
    Assert Equal (RLEN GetCurrentVotes Geoff) 10
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Jared)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "0") (newBalance "10")
    From Torrey (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 2
    Assert Equal (RLEN GetCurrentVotes Geoff) 24
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Equal (RLEN VotesLength Coburn) 0
    Assert Log DelegateChanged (delegator (Address Torrey)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "10") (newBalance "24")
    From Coburn (RLEN Delegate Coburn)
    Assert Equal (RLEN VotesLength Coburn) 1
    Assert Equal (RLEN GetCurrentVotes Coburn) 2
    Assert Equal (RLEN GetCurrentVotesBlock Coburn) LastBlock
    Assert Log DelegateChanged (delegator (Address Coburn)) (fromDelegate (Address Zero)) (toDelegate (Address Coburn))
    Assert Log DelegateVotesChanged (delegate (Address Coburn)) (previousBalance "0") (newBalance "2")
    From Torrey (RLEN Delegate Coburn)
    Assert Equal (RLEN VotesLength Coburn) 2
    Assert Equal (RLEN GetCurrentVotes Coburn) 16
    Assert Equal (RLEN GetCurrentVotesBlock Coburn) LastBlock
    Assert Equal (RLEN VotesLength Geoff) 3
    Assert Equal (RLEN GetCurrentVotes Geoff) 10
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Torrey)) (fromDelegate (Address Geoff)) (toDelegate (Address Coburn))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "24") (newBalance "10")
    Assert Log DelegateVotesChanged (delegate (Address Coburn)) (previousBalance "2") (newBalance "16")

Test "Vote checkpoints don't change on transfer when to and from accounts delegate to same account"
    RLEN Deploy Geoff
    From Geoff (RLEN Transfer Jared 10)
    From Geoff (RLEN Transfer Torrey 14)
    Assert Equal (RLEN VotesLength Geoff) 0
    From Jared (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 1
    Assert Equal (RLEN GetCurrentVotes Geoff) 10
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Jared)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "0") (newBalance "10")
    From Torrey (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 2
    Assert Equal (RLEN GetCurrentVotes Geoff) 24
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Torrey)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "10") (newBalance "24")
    Invariant Static (RLEN VotesLength Geoff)
    Invariant Static (RLEN GetCurrentVotes Geoff)
    Invariant Static (RLEN GetCurrentVotesBlock Geoff)
    From Torrey (RLEN Transfer Jared 14)

Test "Only one checkpoint is added per block for multiple increased balance updates"
    RLEN Deploy Scenario Geoff
    Assert Equal (RLEN VotesLength Geoff) 0
    Assert Equal (RLEN GetCurrentVotes Geoff) 0
    From Jared (RLEN Delegate Geoff)
    Assert Log DelegateChanged (delegator (Address Jared)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    From Torrey (RLEN Delegate Geoff)
    Assert Log DelegateChanged (delegator (Address Torrey)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    From Geoff (RLEN TransferScenario (Jared Torrey) 10)
    Assert Equal (RLEN VotesLength Geoff) 1
    Assert Equal (RLEN GetCurrentVotes Geoff) 20
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Equal (RLEN VotesLength Zero) 0
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "0") (newBalance "10")
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "10") (newBalance "20")

Test "Only one checkpoint is added per block for multiple decreased balance updates"
    RLEN Deploy Scenario Geoff
    From Geoff (RLEN Transfer Jared 10)
    From Geoff (RLEN Transfer Torrey 10)
    Assert Equal (RLEN VotesLength Geoff) 0
    Assert Equal (RLEN GetCurrentVotes Geoff) 0
    From Jared (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 1
    Assert Equal (RLEN GetCurrentVotes Geoff) 10
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Jared)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "0") (newBalance "10")
    From Torrey (RLEN Delegate Geoff)
    Assert Equal (RLEN VotesLength Geoff) 2
    Assert Equal (RLEN GetCurrentVotes Geoff) 20
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Log DelegateChanged (delegator (Address Torrey)) (fromDelegate (Address Zero)) (toDelegate (Address Geoff))
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "10") (newBalance "20")
    From Jared (RLEN Approve Geoff 10)
    From Torrey (RLEN Approve Geoff 10)
    From Geoff (RLEN TransferFromScenario (Jared Torrey) 10)
    Assert Equal (RLEN VotesLength Geoff) 3
    Assert Equal (RLEN GetCurrentVotes Geoff) 0
    Assert Equal (RLEN GetCurrentVotesBlock Geoff) LastBlock
    Assert Equal (RLEN VotesLength Zero) 0
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "20") (newBalance "10")
    Assert Log DelegateVotesChanged (delegate (Address Geoff)) (previousBalance "10") (newBalance "0")

Test "Check transfer reverts when block number exceeds 32 bits"
    RLEN Deploy Geoff
    From Jared (RLEN Delegate Geoff)
    AllowFailures
    SetBlockNumber 5000000000
    From Geoff (RLEN Transfer Jared 10000000e18)
    Assert Revert "revert RLEN::_writeCheckpoint: block number exceeds 32 bits"
